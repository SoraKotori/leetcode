cmake_minimum_required(VERSION 3.16)

project(leetcode)

set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED True)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address -fsanitize=undefined -fno-omit-frame-pointer")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC")

add_executable(189_Rotate_Array "189. Rotate Array.cpp")
add_executable(1368_Minimum_Cost_to_Make_at_Least_One_Valid_Path_in_a_Grid "1368. Minimum Cost to Make at Least One Valid Path in a Grid.cpp")
add_executable(42_Trapping_Rain_Water "42. Trapping Rain Water.cpp")
add_executable(407_Trapping_Rain_Water_II "407. Trapping Rain Water II.cpp")
add_executable(2661_First_Completely_Painted_Row_or_Column "2661. First Completely Painted Row or Column.cpp")
add_executable(2017_Grid_Game "2017. Grid Game.cpp")
add_executable(1765_Map_of_Highest_Peak "1765. Map of Highest Peak.cpp")
add_executable(1267_Count_Servers_that_Communicate "1267. Count Servers that Communicate.cpp")
add_executable(802_Find_Eventual_Safe_States "802. Find Eventual Safe States.cpp")
add_executable(2948_Make_Lexicographically_Smallest_Array_by_Swapping_Elements "2948. Make Lexicographically Smallest Array by Swapping Elements.cpp")
add_executable(2127_Maximum_Employees_to_Be_Invited_to_a_Meeting "2127. Maximum Employees to Be Invited to a Meeting.cpp")
add_executable(1462_Course_Schedule_IV "1462. Course Schedule IV.cpp")
add_executable(2658_Maximum_Number_of_Fish_in_a_Grid "2658. Maximum Number of Fish in a Grid.cpp")
add_executable(684_Redundant_Connection "684. Redundant Connection.cpp")
add_executable(785_Is_Graph_Bipartite "785. Is Graph Bipartite?.cpp")
add_executable(2493_Divide_Nodes_Into_the_Maximum_Number_of_Groups "2493. Divide Nodes Into the Maximum Number of Groups.cpp")
add_executable(827_Making_A_Large_Island "827. Making A Large Island.cpp")
add_executable(1752_Check_if_Array_Is_Sorted_and_Rotated "1752. Check if Array Is Sorted and Rotated.cpp")
add_executable(3105_Longest_Strictly_Increasing_or_Strictly_Decreasing_Subarray "3105. Longest Strictly Increasing or Strictly Decreasing Subarray.cpp")
add_executable(1800_Maximum_Ascending_Subarray_Sum "1800. Maximum Ascending Subarray Sum.cpp")
add_executable(1790_Check_if_One_String_Swap_Can_Make_Strings_Equal "1790. Check if One String Swap Can Make Strings Equal.cpp")
add_executable(1726_Tuple_with_Same_Product "1726. Tuple with Same Product.cpp")
add_executable(167_Two_Sum_II_Input_Array_Is_Sorted "167. Two Sum II - Input Array Is Sorted.cpp")
add_executable(15_3Sum "15. 3Sum.cpp")
add_executable(2349_Design_a_Number_Container_System "2349. Design a Number Container System.cpp")
add_executable(2364_Count_Number_of_Bad_Pairs "2364. Count Number of Bad Pairs.cpp")
add_executable(1910_Remove_All_Occurrences_of_a_Substring "1910. Remove All Occurrences of a Substring.cpp")
add_executable(2342_Max_Sum_of_a_Pair_With_Equal_Sum_of_Digits "2342. Max Sum of a Pair With Equal Sum of Digits.cpp")
add_executable(239_Sliding_Window_Maximum "239. Sliding Window Maximum.cpp")
add_executable(76_Minimum_Window_Substring "76. Minimum Window Substring.cpp")
add_executable(2698_Find_the_Punishment_Number_of_an_Integer "2698. Find the Punishment Number of an Integer.cpp")
add_executable(1079_Letter_Tile_Possibilities "1079. Letter Tile Possibilities.cpp")
add_executable(78_Subsets "78. Subsets.cpp")
add_executable(90_Subsets_II "90. Subsets II.cpp")
add_executable(2375_Construct_Smallest_Number_From_DI_String "2375. Construct Smallest Number From DI String.cpp")
add_executable(46_Permutations "46. Permutations.cpp")
add_executable(1718_Construct_the_Lexicographically_Largest_Valid_Sequence "1718. Construct the Lexicographically Largest Valid Sequence.cpp")
add_executable(1415_The_k-th_Lexicographical_String_of_All_Happy_Strings_of_Length_n "1415. The k-th Lexicographical String of All Happy Strings of Length n.cpp")
add_executable(1980_Find_Unique_Binary_String "1980. Find Unique Binary String.cpp")
add_executable(1261_Find_Elements_in_a_Contaminated_Binary_Tree "1261. Find Elements in a Contaminated Binary Tree.cpp")
add_executable(1028_Recover_a_Tree_From_Preorder_Traversal "1028. Recover a Tree From Preorder Traversal.cpp")
add_executable(3463_Check_If_Digits_Are_Equal_in_String_After_Operations_II "3463. Check If Digits Are Equal in String After Operations II.cpp")
add_executable(889_Construct_Binary_Tree_from_Preorder_and_Postorder_Traversal "889. Construct Binary Tree from Preorder and Postorder Traversal.cpp")
add_executable(2467_Most_Profitable_Path_in_a_Tree "2467. Most Profitable Path in a Tree.cpp")

target_link_libraries(1368_Minimum_Cost_to_Make_at_Least_One_Valid_Path_in_a_Grid gtest gtest_main)
